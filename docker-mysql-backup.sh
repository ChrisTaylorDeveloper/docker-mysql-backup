#!/bin/bash

# ARG_OPTIONAL_BOOLEAN([create-info],[],[Write CREATE TABLE statements.],[on])
# ARG_OPTIONAL_BOOLEAN([complete-insert],[],[Include column names in INSERT statements.],[off])
# ARG_OPTIONAL_BOOLEAN([routines],[],[Include stored routines in the output.],[off])
# ARG_OPTIONAL_BOOLEAN([without-data],[],[Do not dump table contents.],[off])
# ARG_OPTIONAL_BOOLEAN([hyphenate-filename],[],[Use a hyphen between timestamp and database name in dump filename.],[off])
# ARG_OPTIONAL_BOOLEAN([tail],[],[Display last few lines of dump file.],[on])
# ARG_OPTIONAL_SINGLE([dump-suffix],[],[Suffix to add to the dump file name.],[off])
# ARG_POSITIONAL_SINGLE([user],[MySQL user.],[])
# ARG_POSITIONAL_SINGLE([password],[MySQL user password],[])
# ARG_POSITIONAL_SINGLE([host],[MySQL server host.],[])
# ARG_POSITIONAL_SINGLE([port],[MySQL port.])
# ARG_POSITIONAL_SINGLE([db],[The database to backup.],[])
# ARG_POSITIONAL_SINGLE([dirname],[Directory for dump file.],[])
# ARG_HELP([Backup a MySQL database using mysqldump inside a Docker container.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_create_info="on"
_arg_complete_insert="off"
_arg_routines="off"
_arg_without_data="off"
_arg_hyphenate_filename="off"
_arg_tail="on"
_arg_dump_suffix="off"


print_help()
{
	printf '%s\n' "Backup a MySQL database using mysqldump inside a Docker container."
	printf 'Usage: %s [--(no-)create-info] [--(no-)complete-insert] [--(no-)routines] [--(no-)without-data] [--(no-)hyphenate-filename] [--(no-)tail] [--dump-suffix <arg>] [-h|--help] <user> <password> <host> <port> <db> <dirname>\n' "$0"
	printf '\t%s\n' "<user>: MySQL user."
	printf '\t%s\n' "<password>: MySQL user password"
	printf '\t%s\n' "<host>: MySQL server host."
	printf '\t%s\n' "<port>: MySQL port."
	printf '\t%s\n' "<db>: The database to backup."
	printf '\t%s\n' "<dirname>: Directory for dump file."
	printf '\t%s\n' "--create-info, --no-create-info: Write CREATE TABLE statements. (on by default)"
	printf '\t%s\n' "--complete-insert, --no-complete-insert: Include column names in INSERT statements. (off by default)"
	printf '\t%s\n' "--routines, --no-routines: Include stored routines in the output. (off by default)"
	printf '\t%s\n' "--without-data, --no-without-data: Do not dump table contents. (off by default)"
	printf '\t%s\n' "--hyphenate-filename, --no-hyphenate-filename: Use a hyphen between timestamp and database name in dump filename. (off by default)"
	printf '\t%s\n' "--tail, --no-tail: Display last few lines of dump file. (on by default)"
	printf '\t%s\n' "--dump-suffix: Suffix to add to the dump file name. (default: 'off')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-create-info|--create-info)
				_arg_create_info="on"
				test "${1:0:5}" = "--no-" && _arg_create_info="off"
				;;
			--no-complete-insert|--complete-insert)
				_arg_complete_insert="on"
				test "${1:0:5}" = "--no-" && _arg_complete_insert="off"
				;;
			--no-routines|--routines)
				_arg_routines="on"
				test "${1:0:5}" = "--no-" && _arg_routines="off"
				;;
			--no-without-data|--without-data)
				_arg_without_data="on"
				test "${1:0:5}" = "--no-" && _arg_without_data="off"
				;;
			--no-hyphenate-filename|--hyphenate-filename)
				_arg_hyphenate_filename="on"
				test "${1:0:5}" = "--no-" && _arg_hyphenate_filename="off"
				;;
			--no-tail|--tail)
				_arg_tail="on"
				test "${1:0:5}" = "--no-" && _arg_tail="off"
				;;
			--dump-suffix)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_dump_suffix="$2"
				shift
				;;
			--dump-suffix=*)
				_arg_dump_suffix="${_key##--dump-suffix=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'user', 'password', 'host', 'port', 'db' and 'dirname'"
	test "${_positionals_count}" -ge 6 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 6 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 6 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 6 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_user _arg_password _arg_host _arg_port _arg_db _arg_dirname "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

OPTS=()

if [ "$_arg_routines" = "on" ]
then
    OPTS+=(--routines)
fi

if [ "$_arg_without_data" = "on" ]
then
    OPTS+=(--no-data)
fi

if [ "$_arg_create_info" = "off" ]
then
    OPTS+=(--no-create-info)
fi

if [ "$_arg_complete_insert" = "on" ]
then
    OPTS+=(--complete-insert)
fi

if [ "$_arg_hyphenate_filename" = "on" ]
then
    BASENAME_SEPARATOR=-
else
    BASENAME_SEPARATOR=_
fi

SUFFIX=''
if [ -n "$_arg_dump_suffix" ] && [ "$_arg_dump_suffix" != "off" ]
then
    SUFFIX=${BASENAME_SEPARATOR}${_arg_dump_suffix}
fi

DATE=$(date '+%Y-%m-%dT%H:%M:%S')
BASENAME=${DATE}${BASENAME_SEPARATOR}${_arg_db}${SUFFIX}.sql
BU_PATH=${_arg_dirname}${BASENAME}
docker run -it --rm -e MYSQL_PWD="$_arg_password" mysql:8.0.30 mysqldump ${OPTS[*]} -u "$_arg_user" -h "$_arg_host" -P "$_arg_port" "$_arg_db" 1> "$BU_PATH"

if [ "$_arg_tail" = "on" ]
then
    echo "tail of ${BU_PATH}:"
    tail "${BU_PATH}"
fi

# ] <-- needed because of Argbash
